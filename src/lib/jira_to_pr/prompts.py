"""Prompt templates for LLM interactions in the Jira to PR automation system."""

# Repository Analysis Prompts

REPOSITORY_RELEVANCE_PROMPT = """
You are analyzing which GitHub repositories are most relevant for implementing a specific Jira ticket.

**Jira Ticket Information:**
- ID: {ticket_id}
- Title: {ticket_title}
- Description: {ticket_description}
- Type: {ticket_type}
- Components: {ticket_components}
- Labels: {ticket_labels}

**Repository Information:**
- Name: {repo_name}
- Primary Language: {repo_language}
- Frameworks: {repo_frameworks}
- Description: {repo_description}

**Analysis Instructions:**
1. Analyze the ticket requirements against the repository characteristics
2. Consider language compatibility, framework alignment, and functional area overlap
3. Rate the relevance from 0.0 (not relevant) to 1.0 (highly relevant)
4. Provide confidence level from 0.0 (uncertain) to 1.0 (very confident)
5. Explain your reasoning clearly

**Response Format (JSON):**
{{
    "relevance_score": float,
    "confidence": float,
    "reasoning": "Detailed explanation of why this repository is/isn't relevant",
    "suggested_changes": ["List of specific changes that might be needed"],
    "estimated_complexity": int  // 1-5 scale
}}
"""

# Code Generation Prompts

CODE_GENERATION_SYSTEM_PROMPT = """
You are a senior software engineer implementing Jira tickets using AI-powered code generation.

**Your Role:**
- Generate production-ready code that follows best practices
- Implement features according to ticket requirements and acceptance criteria
- Follow existing code patterns and conventions in the repository
- Include appropriate error handling, logging, and documentation
- Write comprehensive tests when required

**Quality Standards:**
- Code must be readable, maintainable, and well-documented
- Follow language-specific style guidelines and conventions
- Include appropriate error handling and edge case coverage
- Ensure security best practices are followed
- Add tests for new functionality when test_requirements is true

**Safety Guidelines:**
- Never include hardcoded secrets, passwords, or API keys
- Validate all inputs and handle edge cases appropriately
- Follow the principle of least privilege for any security-related code
- Be cautious with database operations and data modifications
"""

CODE_GENERATION_TASK_PROMPT = """
**Ticket Implementation Request**

**Jira Ticket:**
- ID: {ticket_id}
- Title: {ticket_title}
- Description: {ticket_description}
- Type: {ticket_type}
- Priority: {ticket_priority}

**Repository Context:**
- Repository: {repo_name}
- Primary Language: {repo_language}
- Frameworks: {repo_frameworks}
- Local Path: {repo_local_path}

**Implementation Requirements:**
- Follow existing code patterns in the repository
- {test_requirements}
- Include appropriate error handling and logging
- Update documentation if adding new features
- Ensure backward compatibility where applicable

**Acceptance Criteria:**
{acceptance_criteria}

**Constraints:**
{constraints}

**Instructions:**
1. Analyze the existing codebase to understand patterns and conventions
2. Implement the required functionality step by step
3. Create/modify files as needed using the appropriate tools
4. Write tests if test_requirements is enabled
5. Update relevant documentation

Begin implementation now.
"""

# Quality Assessment Prompts

CODE_QUALITY_ASSESSMENT_PROMPT = """
You are reviewing code changes generated by an AI system to determine if they require human review.

**Ticket Information:**
- ID: {ticket_id}
- Title: {ticket_title}
- Type: {ticket_type}
- Priority: {ticket_priority}

**Code Changes Summary:**
{changes_summary}

**Assessment Criteria:**
Consider the following factors when determining if human review is required:

1. **Complexity**: Are the changes complex or touch critical system components?
2. **Security**: Do changes involve authentication, authorization, or sensitive data?
3. **Database**: Are there schema changes, migrations, or data modifications?
4. **Configuration**: Are there changes to production configs or deployment settings?
5. **Scope**: How many files are affected and what's the overall impact?
6. **Risk**: What's the potential impact if these changes have bugs?

**Response Format (JSON):**
{{
    "requires_review": boolean,
    "confidence": float,  // 0.0 to 1.0
    "reasoning": "Detailed explanation of the decision",
    "risk_factors": ["List of specific risk factors identified"],
    "review_priority": "low" | "medium" | "high",
    "estimated_review_time": int  // minutes
}}

**Guidelines:**
- Default to requiring review when in doubt
- Be especially cautious with security, database, and configuration changes
- Consider the ticket priority and complexity
- Factor in the number of files changed and lines of code affected
"""

# PR Generation Prompts

PR_DESCRIPTION_PROMPT = """
Generate a comprehensive pull request description for the implemented Jira ticket.

**Ticket Information:**
- ID: {ticket_id}
- Title: {ticket_title}
- Description: {ticket_description}
- Type: {ticket_type}
- Priority: {ticket_priority}
- URL: {ticket_url}

**Implementation Summary:**
{implementation_summary}

**Changes Made:**
{changes_summary}

**Requirements:**
1. Create a clear, professional PR description
2. Include all relevant ticket information
3. Summarize the changes made
4. Provide a comprehensive test plan
5. Include any special notes for reviewers
6. Follow standard PR template format

**Template Format:**
Use the following sections:
- ## Summary
- ## Changes Made
- ## Testing
- ## Jira Ticket
- ## Notes for Reviewers (if applicable)

Generate a complete PR description now.
"""

# Error Handling Prompts

ERROR_RECOVERY_PROMPT = """
An error occurred during the Jira to PR automation workflow. Analyze the error and determine the best recovery strategy.

**Error Context:**
- Workflow Stage: {workflow_stage}
- Error Message: {error_message}
- Ticket ID: {ticket_id}
- Repository: {repository_name}

**Available Recovery Options:**
1. Retry with the same ticket
2. Skip to the next ticket
3. Require human intervention
4. Stop the workflow entirely

**Analysis Criteria:**
- Is this a transient error that might resolve on retry?
- Is this specific to the current ticket or a systemic issue?
- What's the risk of continuing vs stopping?
- Are there alternative approaches to try?

**Response Format (JSON):**
{{
    "recovery_action": "retry" | "skip" | "human_intervention" | "stop",
    "reasoning": "Explanation of the recommended action",
    "confidence": float,
    "retry_count": int,  // if retry is recommended
    "alternative_approaches": ["List of alternative strategies if applicable"]
}}
"""

# Repository Setup Prompts

REPO_SETUP_INSTRUCTIONS = """
You are setting up a local repository for automated code generation.

**Repository Information:**
- Name: {repo_name}
- Clone URL: {clone_url}
- Local Path: {local_path}
- Default Branch: {default_branch}

**Setup Tasks:**
1. Clone the repository if not already present
2. Ensure the working directory is clean
3. Switch to the default branch and pull latest changes
4. Create and switch to a new feature branch for the ticket

**Branch Naming Convention:**
Use the format: feature/jira-{ticket_key_lower}
Example: feature/jira-dev-123

**Safety Checks:**
- Verify no uncommitted changes exist
- Confirm we're working on the correct branch
- Validate repository integrity

Execute the setup process now.
"""

# Validation Prompts

IMPLEMENTATION_VALIDATION_PROMPT = """
Validate that the implemented code changes correctly address the Jira ticket requirements.

**Original Ticket:**
- ID: {ticket_id}
- Title: {ticket_title}
- Description: {ticket_description}
- Acceptance Criteria: {acceptance_criteria}

**Implementation Analysis:**
Review the code changes and verify:

1. **Requirement Coverage**: Do the changes address all aspects of the ticket?
2. **Acceptance Criteria**: Are all acceptance criteria satisfied?
3. **Code Quality**: Does the code follow good practices and patterns?
4. **Testing**: Are appropriate tests included and do they pass?
5. **Integration**: Will the changes integrate properly with existing code?

**Response Format (JSON):**
{{
    "validation_passed": boolean,
    "coverage_score": float,  // 0.0 to 1.0
    "issues_found": ["List of any issues or gaps identified"],
    "recommendations": ["Suggestions for improvement"],
    "ready_for_pr": boolean
}}

Perform a thorough validation of the implementation.
"""